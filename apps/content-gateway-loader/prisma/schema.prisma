datasource db {
  provider = "postgresql"
  url      = env("PG_CGL_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "interactiveTransactions"]
  output          = "../../../node_modules/@cgl/prisma"
}

/// Contains scheduling metadata for a job
model JobSchedule {
  name                String       @id @db.VarChar(255)
  state               JobState     @default(SCHEDULED)
  scheduleMode        ScheduleMode
  /// The cursor that points to the last data entry that was saved.
  /// This can be anything that supports order by
  cursor              String       @db.VarChar(255)
  /// The amount of items to load in the next run
  limit               Int          @db.Integer
  /// The number of times this job has failed in a row
  currentFailCount    Int          @default(0) @db.Integer
  /// The previous time this job was scheduled (used for exponential backoff)
  previousScheduledAt DateTime?    @db.Timestamp(6)
  /// The next time this job should run
  scheduledAt         DateTime     @default(now()) @db.Timestamp(6)
  /// The last time this job ran
  updatedAt           DateTime     @db.Timestamp(6)
  log                 JobLog[]

  @@index([scheduledAt])
  @@index([cursor])
  @@index([state])
}

/// Represents a change in the state of a job
model JobLog {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(255)
  /// A textual summary of the change
  note      String      @db.Text
  /// The state of the job at the time this log event was created
  state     JobState
  /// Additional freeform information
  info      Json?       @db.JsonB
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  job       JobSchedule @relation(fields: [name], references: [name])

  @@index([name])
}

enum JobState {
  SCHEDULED
  CANCELED
  RUNNING
  COMPLETED
  FAILED
}

/// Contains the possible schedule modes
enum ScheduleMode {
  /// Backfill is used when the data is not up to date and we wish to bulk load
  /// until we reach the latest entry in the upstream system
  BACKFILL
  /// Incremental is used when we wish to load only the latest data from the upstream
  INCREMENTAL
}
